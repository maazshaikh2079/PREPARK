Homepage.js:
import "./Homepage.css";
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Form, Alert } from "react-bootstrap";
import { Button } from "react-bootstrap";
import SoceityAutomationParkingimage from "./assets/images/SocietyAutomationParking.jpg";
import PublicParkingimage from "./assets/images/PublicParking.jpeg";
import Collaborator1Image from "./assets/images/PublicParking.jpeg";
import Collaborator2Image from "./assets/images/PublicParking.jpeg";
import Collaborator3Image from "./assets/images/PublicParking.jpeg";


function Homepage() {
  const [hoveredButton, setHoveredButton] = useState(null);
  const navigate = useNavigate();

  const handleButtonHover = (index) => {
    setHoveredButton(index);
  };

  const handleButtonLeave = () => {
    setHoveredButton(null);
  };

  return (
    <div>
      <div
        className={`homepage-container ${
          hoveredButton !== null ? "hovered" : ""
        }`}
      >
        <h1 className="homepage-text">PREPARK</h1>
      </div>
      <div className="button-container">
        {/* Button 1 */}
        <div className="button-container">
        
          {/* <img src={SoceityAutomationParkingimage} alt="Button 1" /> */}
          <span className="button-text">
            <Link to="/sapsi"  className="custom-link" >Society Automation Parking</Link>
            </span>
        </div>

        {/* Button 2 */}
        <div className="button-container">
          {/* <img src={PublicParkingimage} alt="Button 2" className="custom-image"/> */}
          <span className="button-text">
          <Link to="/ppsi"  className="custom-link" >Public Parking</Link>
          </span>
        </div>
      </div>

      <div className="collaborators-container">
        {/* Collaborator 1 */}
        <div className="collaborator">
          <div className="circle">
            <img src={Collaborator1Image} alt="Collaborator 1" />
          </div>
          <p>Collaborator 1</p>
          <p className="description">Description of Collaborator 1</p>
          <p className="learn-more">
            <a
              href="https://collaborator1-link.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              Learn more
            </a>
          </p>
        </div>

        {/* Collaborator 2 */}
        <div className="collaborator">
          <div className="circle">
            <img src={Collaborator2Image} alt="Collaborator 2" />
          </div>
          <p>Collaborator 2</p>
          <p className="description">Description of Collaborator 2</p>
          <p className="learn-more">
            <a
              href="https://collaborator2-link.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              Learn more
            </a>
          </p>
        </div>

        {/* Collaborator 3 */}
        <div className="collaborator">
          <div className="circle">
            <img src={Collaborator3Image} alt="Collaborator 3" />
          </div>
          <p>Collaborator 3</p>
          <p className="description">Description of Collaborator 3</p>
          <p className="learn-more">
            <a
              href="https://collaborator3-link.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              Learn more
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}

export default Homepage;

PPSI.js:
import "./PPSI.css";
import "../App.css";
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Form, Alert } from "react-bootstrap";
import { Button } from "react-bootstrap";
import GoogleButton from "react-google-button";
import { useUserAuth } from "../contexts/UserAuthContext-PP.js";

function PPSI() {
  const [Email, setEmail] = useState("");
  const [Password, setPassword] = useState("");
  const [error, setError] = useState("");
  const { logIn } = useUserAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    try {
        await logIn(Email, Password);
        navigate("/");
    } catch(err) {
        setError(err.message);
    } 
  };

  return (
    <div className="container">
      <div className="form">
      {error && <Alert variant="danger">{error}</Alert>}
        <form onSubmit={handleSubmit}>
          <label htmlFor="email">Email ID:</label>
          <input
            type="email"
            id="email"
            name="email"
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          
          < br/>
          <button type="Submit">Sign In</button>
          </form>

        <br/>

        <p className="sign-in-link">Create an account `  
          <Link to="/ppsp">Sign Up</Link>`
        </p>

      </div>
      <div className="imageppa-container"></div>
    </div>
  );
}

export default PPSI;

PPSP.js:
import "./PPSP.css";
import "../App.css";
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Form, Alert } from "react-bootstrap";
import { Button } from "react-bootstrap";
import GoogleButton from "react-google-button";
import { sendEmailVerification, deleteUser } from "firebase/auth";
import { auth } from "../configurations/firebase-config-PP.js";
import { useUserAuth } from "../contexts/UserAuthContext-PP.js";
import { db } from "../configurations/firebase-config-PP.js";

import { 
  collection, 
  getDocs,   // R
  addDoc,    // C
  updateDoc, // U
  doc,       // U
  deleteDoc  // D
} from "firebase/firestore";

function PPSP() {
  const [Name, setName] = useState("");
  const [Phone, setPhone] = useState(0);
  const [Email, setEmail] = useState("");
  const [Password, setPassword] = useState("");
  const [Vehicle, setVehicle] = useState("");
  const [Slot, setSlot] = useState("");

  const [error, setError] = useState("");
  const { signUp } = useUserAuth();
  // const { verifyEmail } = useUserAuth();
  const navigate = useNavigate();

  const usersCollectionRef = collection(db, "Parking_Users");

const handleSubmit = async (e) => {
  e.preventDefault();
  setError("");
  try {
    if (Name !== "" && Phone !== 0 && Email !== "" && Password !== "" && Vehicle !== "") {
      // Step 1: Sign up the user
      await signUp(Email, Password);

      // Step 2: Send email verification
      await sendEmailVerification(auth.currentUser);

      // Step 3: Wait for email verification
      const isEmailVerified = await waitForEmailVerification();

      if (isEmailVerified) {
        // Step 4: Email is verified, store data in the database
        await addDoc(usersCollectionRef, {
          Name: Name,
          Phone: Number(Phone),
          Email: Email,
          Vehicle: Vehicle
        });

        navigate("/");
      } else {
        // Step 5: Email not verified, delete the signed-up user
        await deleteUser(auth.currentUser);

        alert("Email verification link expired. Please sign up again.");
      }
    } else {
      alert("Enter complete details!");
    }
  } catch (err) {
    setError(err.message);
  }
};

// Function to wait for email verification within a timeout period
const waitForEmailVerification = async () => {
  let timeout = 60 * 1000; // 60 seconds, adjust as needed
  const user = auth.currentUser;

  while (timeout > 0) {
    await user.reload(); // Refresh user data
    if (user.emailVerified) {
      return true; // Email is verified
    }

    await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second
    timeout -= 1000;
  }

  return false; // Email verification link expired
};

  return (
    <div className="container">
      <div className="form">
      {error && <Alert variant="danger">{error}</Alert>}
        <form onSubmit={handleSubmit}>
          <label htmlFor="fullName">Full Name:</label>
          <input
            type="text"
            id="fullName"
            name="fullName"
            onChange={(event) => {
              setName(event.target.value);
            }}
            required
          />
          <label htmlFor="phoneNo">Phone no.:</label>
          <input
            type="text"
            id="phoneNo"
            name="phoneNo"
            onChange={(event) => {
              setPhone(event.target.value);
            }}
            required
          />

          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            onChange={(event) => {
              setEmail(event.target.value);
            }}
            required
          />

          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            onChange={(event) => {
              setPassword(event.target.value);
            }}
            required
          />

          <label htmlFor="vehicleNo">Vehicle No:</label>
          <input
            type="text"
            id="vehicleNo"
            name="vehicleNo"
            onChange={(event) => {
              setVehicle(event.target.value);
            }}
            required
          />
          
          <br/>
          <button type="submit">Sign Up</button>
        </form>
        
        <br/>
        <p className="sign-in-link">Already have an account? `
         <Link to="/ppsi">Sign In</Link>`
        </p> 
      </div>
      <div className="imageppa-container"></div>
    </div>  
  );
}

export default PPSP;

SAPSI.js:
import "./SAPSI.css";
import "../App.css";
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Form, Alert } from "react-bootstrap";
import { Button } from "react-bootstrap";
import GoogleButton from "react-google-button";
import { useUserAuth } from "../contexts/UserAuthContext-SAP";

function SAPSI() {
  const [Email, setEmail] = useState("");
  const [Password, setPassword] = useState("");
  const [error, setError] = useState("");
  const { logIn } = useUserAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    try {
        await logIn(Email, Password);
        navigate("/");
    } catch(err) {
        setError(err.message);
    } 
  };


  return (
    <div className="container">
      <div className="image1"></div>
      <div className="form">
       {error && <Alert variant="danger">{error}</Alert>}
       <form onSubmit={handleSubmit}>
          <label htmlFor="email">Email ID:</label>
          <input
            type="email"
            id="email"
            name="email"
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          
          < br/>
          <button type="Submit">Sign In</button>

          </form>
        

        <br/>
        
          <p className="sign-in-link">Dont have an account? 
          `<Link to="/sapsp">Sign Up</Link>`
          </p>
      
      </div>
    </div>
  );
}

export default SAPSI;

SAPSP.js:
import "./SAPSP.css";
import "../App.css";
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Form, Alert } from "react-bootstrap";
import { Button } from "react-bootstrap";
import GoogleButton from "react-google-button";
import { sendEmailVerification, deleteUser } from "firebase/auth";
import { useUserAuth } from "../contexts/UserAuthContext-SAP";
import { auth } from "../configurations/firebase-config-SAP";
import { db } from "../configurations/firebase-config-SAP";
import { 
  collection, 
  getDocs,   // R
  addDoc,    // C
  updateDoc, // U
  doc,       // U
  deleteDoc  // D
} from "firebase/firestore";

function SAPSP() {
  const [Name, setName] = useState("");
  const [Phone, setPhone] = useState(0);
  const [Room, setRoom] = useState(0);
  const [Email, setEmail] = useState("");
  const [Password, setPassword] = useState("");
  const [Vehicle, setVehicle] = useState("");
  const [Slot, setSlot] = useState("");

  const [error, setError] = useState("");
  const { signUp } = useUserAuth();
  const navigate = useNavigate();


  const usersCollectionRef = collection(db, "Residents");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    try {
        if (Name!=="" && Phone!==0 && Room!==0 && Email!=="" && Password!=="" && Vehicle!=="") {
          // Step 1: Sign up the user
          await signUp(Email, Password);

          // Step 2: Send email verification
          await sendEmailVerification(auth.currentUser);

          // Step 3: Wait for email verification
          const isEmailVerified = await waitForEmailVerification();

          if (isEmailVerified) {
            // Step 4: Email is verified, store data in the database
            await addDoc(usersCollectionRef, {
              Name: Name,
              Room: Room,
              Phone: Number(Phone),
              Email: Email,
              Vehicle: Vehicle
            });
    
            navigate("/");
          } else {
            // Step 5: Email not verified, delete the signed-up user
            await deleteUser(auth.currentUser);
    
            alert("Email verification link expired. Please sign up again.");
          }
        } else {
          alert("Enter complete details!");
        }
      } catch (err) {
        setError(err.message);
      }
    };

  // Function to wait for email verification within a timeout period
  const waitForEmailVerification = async () => {
    let timeout = 60 * 1000; // 60 seconds, adjust as needed
    const user = auth.currentUser;

    while (timeout > 0) {
      await user.reload(); // Refresh user data
      if (user.emailVerified) {
        return true; // Email is verified
      }

      await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second
      timeout -= 1000;
    }

    return false; // Email verification link expired
  };

  return (
    <div className="container">
      <div className="image"></div>
      <div className="form">
       {error && <Alert variant="danger">{error}</Alert>}
        <form onSubmit={handleSubmit}>
          <label htmlFor="fullName">Full Name:</label>
          <input
            type="text"
            id="fullName"
            name="fullName"
           onChange={(event) => {
            setName(event.target.value);
          }}
            required
          />

          <label htmlFor="phoneNo">Phone no.:</label>
          <input
            type="number"
            id="phoneNo"
            name="phoneNo"
            onChange={(event) => {
              setPhone(event.target.value);
            }}
            required
          />
          <label htmlFor="roomNo">Room no.:</label>
          <input
            type="text"
            id="roomNo"
            name="roomNo"
           onChange={(event) => {
            setRoom(event.target.value);
          }}
            required
          />
          <label htmlFor="email">Email ID:</label>
          <input
            type="email"
            id="email"
            name="email"
            onChange={(event) => {
              setEmail(event.target.value);
            }}
            required
          />

          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            //value={formData.password}
            onChange={(event) => {
              setPassword(event.target.value);
            }}
            required
          />

          <label htmlFor="vehicleNo">Vehicle no.:</label>
          <input
            type="text"
            id="vehicleNo"
            name="vehicleNo"
            //value={formData.vehicleNo}
            onChange={(event) => {
              setVehicle(event.target.value);
            }}
            required
          />

         {/* <br/> */}
          <button type="submit">Sign Up</button>
        </form>

        {/* <br/> */}
        <p className="sign-in-link">Already have an account? `<Link to="/sapsi">Sign In</Link>`
        </p>
      </div>
    </div>
  );
}

export default SAPSP;

firebase-config-PP.js:

import { initializeApp } from "firebase/app";
import { getFirestore } from "@firebase/firestore";
import {getAuth} from "firebase/auth";

const firebaseConfigPP = {
  apiKey: "AIzaSyCIheP9reHJ3SdDiyIrIhLpxvOKmHqfg74",
  authDomain: "prepark-pp.firebaseapp.com",
  projectId: "prepark-pp",
  storageBucket: "prepark-pp.appspot.com",
  messagingSenderId: "408591279880",
  appId: "1:408591279880:web:187e7d447309e739cdaebd",
  measurementId: "G-7VQ3L76TMG"
}

const appPP = initializeApp(firebaseConfigPP);
export const db = getFirestore(appPP);
export const auth = getAuth(appPP);
export default appPP;

firebase-config-SAP.js:

import { initializeApp } from "firebase/app";
import { getFirestore } from "@firebase/firestore";
import {getAuth} from "firebase/auth";

const firebaseConfigSAP = {
    apiKey: "AIzaSyAl_UnxnxhlKqJUvBtZBSIUj1Fxc6uMYt8",
    authDomain: "prepark-sap.firebaseapp.com",
    projectId: "prepark-sap",
    storageBucket: "prepark-sap.appspot.com",
    messagingSenderId: "960592229642",
    appId: "1:960592229642:web:d9fc0b73af618e8bd076f3",
    measurementId: "G-GKWZNPWKHG"
  };

const appSAP = initializeApp(firebaseConfigSAP);
export const db = getFirestore(appSAP);
export const auth = getAuth(appSAP);
export default appSAP;

UserAuthContext-PP.js:

import { createContext, useContext, useEffect, useState } from "react";
import {
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut,
    onAuthStateChanged,
    GoogleAuthProvider,
    signInWithPopup,
    sendPasswordResetEmail,
    sendEmailVerification // Add this import
} from "firebase/auth";
import { auth } from "../configurations/firebase-config-PP.js";

const userAuthContextPP = createContext();

export function UserAuthContextProviderPP({ children }) {
    const [user, setUser] = useState("");
    
    function signUp(email, password) {
        return createUserWithEmailAndPassword(auth, email, password);
    }
    
    function logIn(email, password) {
        return signInWithEmailAndPassword(auth, email, password);
    }
    
    function logOut() {
        return signOut(auth);
    }

    function googleSignIn() {
        const googleAuthProvider = new GoogleAuthProvider();
        return signInWithPopup(auth, googleAuthProvider);
    }


    // function verifyEmail(email) {
    //     return sendEmailVerification(auth,email); // Send email verification
    // }


    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
            setUser(currentUser);
        });
        return () => {
            unsubscribe();
        };
    }, []);

    return <userAuthContextPP.Provider value={{user, signUp, logIn, logOut, googleSignIn}}>{children}</userAuthContextPP.Provider>;
   // return <userAuthContext.Provider value={{user, signUp, logIn, logOut, googleSignIn, verifyEmail}}>{children}</userAuthContext.Provider>;
}

export function useUserAuth() {
    return useContext(userAuthContextPP);
}

UserAuthContext-SAP.js:

import { createContext, useContext, useEffect, useState } from "react";
import {
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut,
    onAuthStateChanged,
    GoogleAuthProvider,
    signInWithPopup,
    sendPasswordResetEmail,
    sendEmailVerification // Add this import
} from "firebase/auth";
import { auth } from "../configurations/firebase-config-SAP.js";

const userAuthContextSAP = createContext();

export function UserAuthContextProviderSAP({ children }) {
    const [user, setUser] = useState("");
    
    function signUp(email, password) {
        return createUserWithEmailAndPassword(auth, email, password);
    }
    
    function logIn(email, password) {
        return signInWithEmailAndPassword(auth, email, password);
    }
    
    function logOut() {
        return signOut(auth);
    }

    function googleSignIn() {
        const googleAuthProvider = new GoogleAuthProvider();
        return signInWithPopup(auth, googleAuthProvider);
    }


    // function verifyEmail(email) {
    //     return sendEmailVerification(auth,email); // Send email verification
    // }


    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
            setUser(currentUser);
        });
        return () => {
            unsubscribe();
        };
    }, []);

    return <userAuthContextSAP.Provider value={{user, signUp, logIn, logOut, googleSignIn}}>{children}</userAuthContextSAP.Provider>;
   // return <userAuthContext.Provider value={{user, signUp, logIn, logOut, googleSignIn, verifyEmail}}>{children}</userAuthContext.Provider>;
}

export function useUserAuth() {
    return useContext(userAuthContextSAP);
}

App.js:

import Homepage from "./components/Homepage";
import { Container, Row, Col } from 'react-bootstrap';
import { Routes, Route } from 'react-router-dom';
import {UserAuthContextProviderSAP} from "./contexts/UserAuthContext-SAP.js"
// import { UserAuthContextProviderPP } from "./contexts/UserAuthContext-PP.js";
import SAPSI from "./components/SAPSI.js";
import SAPSP from "./components/SAPSP.js";
import PPSP from "./components/PPSP.js";
import PPSI from "./components/PPSI.js";

function App() {
  return (
    <Container>
      <Row>
        <Col>
        <UserAuthContextProviderSAP>
        {/* <UserAuthContextProviderPP> */}
         <Routes>
          <Route path='/' element={<Homepage/>}/>
          <Route path='/homepage' element={<Homepage/>}/>
          <Route path='/sapsi' element={<SAPSI/>}/>
          <Route path='/sapsp' element={<SAPSP/>}/>
          <Route path='/ppsp' element={<PPSP/>}/>
          <Route path='/ppsi' element={<PPSI/>}/>
         </Routes>
         {/* </UserAuthContextProviderPP> */}
         </UserAuthContextProviderSAP>
        </Col>
      </Row>
    </Container>
  );
}

export default App;

index.js:

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter as Router } from 'react-router-dom';
import "bootstrap/dist/css/bootstrap.min.css";
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Router>
     <App />
    </Router>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

reportWebVitals.js:

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

This my codes above 
and i am getting this error as output:

Uncaught runtime errors:
×
ERROR
Firebase: Firebase App named '[DEFAULT]' already exists with different options or config (app/duplicate-app).
FirebaseError: Firebase: Firebase App named '[DEFAULT]' already exists with different options or config (app/duplicate-app).
    at initializeApp (http://localhost:3000/static/js/bundle.js:93050:27)
    at ./src/configurations/firebase-config-PP.js (http://localhost:3000/static/js/bundle.js:1546:74)
    at options.factory (http://localhost:3000/static/js/bundle.js:98565:31)
    at __webpack_require__ (http://localhost:3000/static/js/bundle.js:97988:33)
    at fn (http://localhost:3000/static/js/bundle.js:98222:21)
    at ./src/components/PPSP.js (http://localhost:3000/static/js/bundle.js:707:95)
    at options.factory (http://localhost:3000/static/js/bundle.js:98565:31)
    at __webpack_require__ (http://localhost:3000/static/js/bundle.js:97988:33)
    at fn (http://localhost:3000/static/js/bundle.js:98222:21)
    at ./src/App.js (http://localhost:3000/static/js/bundle.js:23:77)

